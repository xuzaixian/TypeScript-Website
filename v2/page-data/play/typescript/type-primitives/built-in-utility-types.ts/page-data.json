{"componentChunkName":"component---src-templates-play-example-tsx","path":"/play/typescript/type-primitives/built-in-utility-types.ts","result":{"data":{"allSitePage":{"nodes":[{"path":"/dev-404-page/"},{"path":"/docs/handbook/advanced-types.html"},{"path":"/docs/handbook/basic-types.html"},{"path":"/docs/handbook/classes.html"},{"path":"/docs/handbook/compiler-options-in-msbuild.html"},{"path":"/docs/handbook/compiler-options.html"},{"path":"/docs/handbook/configuring-watch.html"},{"path":"/docs/handbook/declaration-merging.html"},{"path":"/docs/handbook/decorators.html"},{"path":"/docs/handbook/enums.html"},{"path":"/docs/handbook/functions.html"},{"path":"/docs/handbook/generics.html"},{"path":"/docs/handbook/integrating-with-build-tools.html"},{"path":"/docs/handbook/interfaces.html"},{"path":"/docs/handbook/iterators-and-generators.html"},{"path":"/docs/handbook/jsdoc-supported-types.html"},{"path":"/docs/handbook/jsx.html"},{"path":"/docs/handbook/mixins.html"},{"path":"/docs/handbook/module-resolution.html"},{"path":"/docs/handbook/modules.html"},{"path":"/docs/handbook/namespaces-and-modules.html"},{"path":"/docs/handbook/namespaces.html"},{"path":"/docs/handbook/nightly-builds.html"},{"path":"/docs/handbook/project-references.html"},{"path":"/docs/handbook/symbols.html"},{"path":"/docs/handbook/triple-slash-directives.html"},{"path":"/docs/handbook/type-checking-javascript-files.html"},{"path":"/docs/handbook/type-compatibility.html"},{"path":"/docs/handbook/type-inference.html"},{"path":"/docs/handbook/typings-for-npm-packages.html"},{"path":"/docs/handbook/utility-types.html"},{"path":"/docs/handbook/variable-declarations.html"},{"path":"/docs/handbook/writing-declaration-files.html"},{"path":"/docs/handbook/declaration-files/by-example.html"},{"path":"/docs/handbook/declaration-files/consumption.html"},{"path":"/docs/handbook/declaration-files/deep-dive.html"},{"path":"/docs/handbook/declaration-files/do-s-and-don-ts.html"},{"path":"/docs/handbook/declaration-files/introduction.html"},{"path":"/docs/handbook/declaration-files/library-structures.html"},{"path":"/docs/handbook/declaration-files/publishing.html"},{"path":"/docs/handbook/declaration-files/templates.html"},{"path":"/docs/handbook/release-notes/typescript-1-1.html"},{"path":"/docs/handbook/release-notes/typescript-1-3.html"},{"path":"/docs/handbook/release-notes/typescript-1-4.html"},{"path":"/docs/handbook/release-notes/typescript-1-5.html"},{"path":"/docs/handbook/release-notes/typescript-1-6.html"},{"path":"/docs/handbook/release-notes/typescript-1-7.html"},{"path":"/docs/handbook/release-notes/typescript-1-8.html"},{"path":"/docs/handbook/release-notes/typescript-2-0.html"},{"path":"/docs/handbook/release-notes/typescript-2-1.html"},{"path":"/docs/handbook/release-notes/typescript-2-2.html"},{"path":"/docs/handbook/release-notes/typescript-2-3.html"},{"path":"/docs/handbook/release-notes/typescript-2-4.html"},{"path":"/docs/handbook/release-notes/typescript-2-5.html"},{"path":"/docs/handbook/release-notes/typescript-2-6.html"},{"path":"/docs/handbook/release-notes/typescript-2-7.html"},{"path":"/docs/handbook/release-notes/typescript-2-8.html"},{"path":"/docs/handbook/release-notes/typescript-2-9.html"},{"path":"/docs/handbook/release-notes/typescript-3-0.html"},{"path":"/docs/handbook/release-notes/typescript-3-1.html"},{"path":"/docs/handbook/release-notes/typescript-3-2.html"},{"path":"/docs/handbook/release-notes/typescript-3-3.html"},{"path":"/docs/handbook/release-notes/typescript-3-4.html"},{"path":"/docs/handbook/release-notes/typescript-3-5.html"},{"path":"/docs/handbook/release-notes/typescript-3-6.html"},{"path":"/docs/handbook/release-notes/typescript-3-7.html"},{"path":"/docs/handbook/asp-net-core.html"},{"path":"/docs/handbook/angular.html"},{"path":"/docs/handbook/gulp.html"},{"path":"/docs/handbook/migrating-from-javascript.html"},{"path":"/docs/handbook/react-&-webpack.html"},{"path":"/docs/handbook/react.html"},{"path":"/docs/handbook/typescript-in-5-minutes.html"},{"path":"/docs/handbook/tsconfig-json.html"},{"path":"/docs/handbook/declaration-files/templates/global-modifying-module-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/global-plugin-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/global-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/module-class-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/module-function-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/module-plugin-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/module-d-ts.html"},{"path":"/docs/handbook/release-notes/overview.html"},{"path":"/tsconfig"},{"path":"/en/tsconfig"},{"path":"/ja/tsconfig"},{"path":"/vo/tsconfig"},{"path":"/en/play"},{"path":"/ja/play"},{"path":"/vo/play"},{"path":"/play/3-7/fixits/big-number-literals.ts"},{"path":"/play/3-7/fixits/const-to-let.ts"},{"path":"/play/3-7/fixits/infer-from-usage-changes.ts"},{"path":"/play/3-7/syntax-and-messaging/flattened-error-reporting.ts"},{"path":"/play/3-7/syntax-and-messaging/nullish-coalescing.ts"},{"path":"/play/3-7/syntax-and-messaging/optional-chaining.ts"},{"path":"/play/3-7/types-and-code-flow/assertion-functions.ts"},{"path":"/play/3-7/types-and-code-flow/recursive-type-references.ts"},{"path":"/play/3-7/types-and-code-flow/uncalled-function-checks.ts"},{"path":"/play/3-8/breaking-changes/checking-unions-with-index-signatures.ts"},{"path":"/play/3-8/jsdoc-improvements/accessibility-modifiers.js"},{"path":"/play/3-8/syntax-and-messaging/export-modules-from.ts"},{"path":"/play/3-8/syntax-and-messaging/private-class-fields.ts"},{"path":"/play/javascript/external-apis/typescript-with-deno.ts"},{"path":"/play/javascript/external-apis/typescript-with-node.js"},{"path":"/play/javascript/external-apis/typescript-with-web.js"},{"path":"/play/javascript/external-apis/typescript-with-webgl.js"},{"path":"/play/javascript/functions-with-javascript/function-chaining.ts"},{"path":"/play/javascript/functions-with-javascript/generic-functions.ts"},{"path":"/play/javascript/functions-with-javascript/typing-functions.ts"},{"path":"/play/javascript/helping-with-javascript/errors.ts"},{"path":"/play/javascript/helping-with-javascript/quick-fixes.ts"},{"path":"/play/javascript/javascript-essentials/code-flow.ts"},{"path":"/play/javascript/javascript-essentials/functions.ts"},{"path":"/play/javascript/javascript-essentials/hello-world.ts"},{"path":"/play/javascript/javascript-essentials/objects-and-arrays.ts"},{"path":"/play/javascript/modern-javascript/async-await.ts"},{"path":"/play/javascript/modern-javascript/immutability.ts"},{"path":"/play/javascript/modern-javascript/import-export.ts"},{"path":"/play/javascript/modern-javascript/jsdoc-support.js"},{"path":"/play/javascript/working-with-classes/classes-101.ts"},{"path":"/play/javascript/working-with-classes/generic-classes.ts"},{"path":"/play/javascript/working-with-classes/mixins.ts"},{"path":"/play/javascript/working-with-classes/this.ts"},{"path":"/play/playground/config/javascript-playgrounds.js"},{"path":"/play/playground/config/new-compiler-defaults.ts"},{"path":"/play/playground/language/automatic-type-acquisition.ts"},{"path":"/play/playground/language/fixits.ts"},{"path":"/play/playground/tooling/mobile-support.ts"},{"path":"/play/playground/tooling/sharable-urls.ts"},{"path":"/play/playground/tooling/typescript-versions.ts"},{"path":"/play/typescript/language/soundness.ts"},{"path":"/play/typescript/language/structural-typing.ts"},{"path":"/play/typescript/language/type-guards.ts"},{"path":"/play/typescript/language/type-widening-and-narrowing.ts"},{"path":"/play/typescript/language-extensions/enums.ts"},{"path":"/play/typescript/language-extensions/nominal-typing.ts"},{"path":"/play/typescript/language-extensions/types-vs-interfaces.ts"},{"path":"/play/typescript/meta-types/conditional-types.ts"},{"path":"/play/typescript/meta-types/discriminate-types.ts"},{"path":"/play/typescript/meta-types/indexed-types.ts"},{"path":"/play/typescript/meta-types/mapped-types.ts"},{"path":"/play/typescript/primitives/any.ts"},{"path":"/play/typescript/primitives/literals.ts"},{"path":"/play/typescript/primitives/union-and-intersection-types.ts"},{"path":"/play/typescript/primitives/unknown-and-never.ts"},{"path":"/play/typescript/type-primitives/built-in-utility-types.ts"},{"path":"/play/typescript/type-primitives/nullable-types.ts"},{"path":"/play/typescript/type-primitives/tuples.ts"},{"path":"/ja/play/typescript/language-extensions/enums.ts"},{"path":"/ja/play/typescript/language-extensions/nominal-typing.ts"},{"path":"/ja/play/typescript/language-extensions/types-vs-interfaces.ts"},{"path":"/ja/play/typescript/primitives/any.ts"},{"path":"/ja/play/typescript/primitives/literals.ts"},{"path":"/ja/play/typescript/type-primitives/built-in-utility-types.ts"},{"path":"/vo/play/javascript/javascript-essentials/code-flow.ts"},{"path":"/vo/play/javascript/javascript-essentials/functions.ts"},{"path":"/vo/play/javascript/javascript-essentials/hello-world.ts"},{"path":"/vo/play/javascript/javascript-essentials/objects-and-arrays.ts"},{"path":"/community"},{"path":"/ja/community"},{"path":"/vo/community"},{"path":"/download"},{"path":"/ja/download"},{"path":"/vo/download"},{"path":"/empty"},{"path":"/ja/empty"},{"path":"/vo/empty"},{"path":"/"},{"path":"/ja/"},{"path":"/vo/"},{"path":"/why-create-typescript"},{"path":"/ja/why-create-typescript"},{"path":"/vo/why-create-typescript"},{"path":"/docs/home"},{"path":"/ja/docs/home"},{"path":"/vo/docs/home"},{"path":"/dev/playground-plugins/"},{"path":"/dev/sandbox/"},{"path":"/dev/twoslash/"}]}},"pageContext":{"name":"Built-in Utility Types","title":"Built-in Utility Types","lang":"en","html":"\n When a particular type feels like it's useful in most\n codebases, they are added into TypeScript and become\n available for anyone which means you can consistently\n rely on their availability\n\n Partial<Type>\n\n Takes a type and converts all of its properties\n to optional ones.\n\n<code><pre>\ninterface Sticker {\n  id: number\n  name: string\n  createdAt: string\n  updatedAt: string\n  submitter: undefined | string\n}\n\ntype StickerUpdateParam = Partial<Sticker>\n\n\n// Readonly<Type>\n\n// Takes an object and makes its properties read-only.\n\ntype StickerFromAPI = Readonly<Sticker>\n\n\n// Record<KeysFrom, Type>\n\n</pre></code>\n// Creates a type which uses the list of properties from\n KeysFrom and gives them the value of Type.\n\n List which keys come from:\n<code><pre>\ntype NavigationPages = 'home' | 'stickers' | 'about' | 'contact'\n\n// The shape of the data for which each of ^ is needed:\ninterface PageInfo {\n  title: string\n  url: string\n  axTitle?: string\n}\n\nconst navigationInfo: Record<NavigationPages, PageInfo> = {\n  home: { title: \"Home\", url: \"/\" },\n  about: { title: \"About\" , url: \"/about\"},\n  contact: { title: \"Contact\", url: \"/contact\" },\n  stickers: { title: \"Stickers\", url: \"/stickers/all\" }\n}\n\n// Pick<Type, Keys>\n\n</pre></code>\n// Creates a type by picking the set of properties Keys\n from Type. Essentially an allow-list for extracting type\n information from a type.\n\n<code><pre>\ntype StickerSortPreview = Pick<Sticker, \"name\" | \"updatedAt\">\n\n\n// Omit<Type, Keys>\n\n</pre></code>\n// Creates a type by removing the set of properties Keys\n from Type. Essentially a block-list for extracting type\n information from a type.\n\n<code><pre>\ntype StickerTimeMetadata = Omit<Sticker, \"name\">\n\n\n// Exclude<Type, RemoveUnion>\n\n</pre></code>\n// Creates a type where any property in Type's properties\n which don't overlap with RemoveUnion.\n\n<code><pre>\ntype HomeNavigationPages = Exclude<NavigationPages, \"home\">\n\n\n// Extract<Type, MatchUnion>\n\n</pre></code>\n// Creates a type where any property in Type's properties\n are included if they overlap with MatchUnion.\n\n<code><pre>\ntype DynamicPages = Extract<NavigationPages, \"home\" | \"stickers\">\n\n\n// NonNullable<Type>\n\n</pre></code>\n// Creates a type by excluding null and undefined from a set\n of properties. Useful when you have a validation check.\n\n<code><pre>\ntype StickerLookupResult = Sticker | undefined | null\ntype ValidatedResult = NonNullable<StickerLookupResult>\n\n\n// ReturnType<Type>\n\n// Extracts the return value from a Type.\n\ndeclare function getStickerByID(id: number): Promise<StickerLookupResult>\ntype StickerResponse = ReturnType<typeof getStickerByID>\n\n\n// InstanceType<Type>\n\n</pre></code>\n// Creates a type which is an instance of a class, or object\n with a constructor function.\n\n<code><pre>\nclass StickerCollection {\n  stickers: Sticker[]\n}\n\ntype CollectionItem = InstanceType<typeof StickerCollection>\n\n\n// Required<Type>\n\n</pre></code>\n// Creates a type which converts all optional properties\n to required ones.\n\n<code><pre>\ntype AccessiblePageInfo = Required<PageInfo>\n\n\n// ThisType<Type>\n\n</pre></code>\n// Unlike other types, ThisType does not return a new\n type but instead manipulates the definition of this\n inside a function. You can only use ThisType when you\n have noImplicitThis turned on in your TSConfig.\n\n https://www.typescriptlang.org/docs/handbook/utility-types.html\n","redirectHref":"/play/?strictNullChecks=true#example/built-in-utility-types"}}}